#!/usr/bin/env node

'use strict';

const MicroserviceClient = require('../index.js');

require('dotenv').config({silent: true});

var clientSettings = {
  URL: process.env.URL
}

if (!process.env.URL) {
  console.log('Please provide Enviroment variable URL');
  process.exit();
}

if (process.env.SECURE_KEY) {
  clientSettings.secureKey = process.env.SECURE_KEY;
}

if (process.env.ACCESS_TOKEN) {
  clientSettings.accessToken = process.env.ACCESS_TOKEN;
}

var client = new MicroserviceClient(clientSettings);


if (!process.argv[2]) {
  console.log('Please provide method: get, post, put, delete, search');
  process.exit();
}

switch (process.argv[2]){
  case 'get': {
    if (!process.argv[3]) {
      console.log('Please provide RecordID: mfw-client get RecordID');
      process.exit();
    }

    if (!process.argv[4] && !process.env.ACCESS_TOKEN) {
      console.log('Please provide ENV:ACCESS_TOKEN or token by: mfw-client get RecordID TOKEN');
      process.exit();
    }

    if (process.argv[4]) {
      client.get(process.argv[3], process.argv[4], function(err, handlerResponse) {
        if (err) {
          console.log(err);
        }
        console.log(handlerResponse);
      });
      process.exit();
    }

    client.get(process.argv[3], function(err, handlerResponse) {
      if (err) {
        console.log(err);
      }
      console.log(handlerResponse);
    });
    break;
  }
  case 'post': {
    if (!process.argv[3]) {
      console.log('Please provide data');
      process.exit();
    }
    var data = {};
    try {
      data = JSON.parse(process.argv[3]);
    } catch (e) {
      console.log(e);
      console.log(e.stack);
      process.exit();
    }
    client.post(data, function(err, handlerResponse) {
      if (err) {
        console.log(err);
      }
      console.log(handlerResponse);
    });
    break;
  }
  case 'put': {
    if (!process.argv[3]) {
      console.log('Please provide RecordID: mfw-client put RecordID');
      process.exit();
    }

    if (!process.argv[5] && !process.env.ACCESS_TOKEN) {
      console.log('Please provide ENV:ACCESS_TOKEN or token by: mfw-client put RecordID TOKEN');
      process.exit();
    }

    if (!process.argv[5] && !process.argv[4]) {
      console.log('Data requierd:');
      console.log('\tmfw-client put RecordID TOKEN \'{key: value}\'');
      console.log('\tor');
      console.log('\tACCESS_TOKEN=TOKEN mfw-client put RecordID \'{key: value}\'');
      process.exit();
    }
    if (process.argv[5]) {
      client.put(process.argv[3], process.argv[4], process.argv[5], function(err, handlerResponse) {
        if (err) {
          console.log(err);
        }
        console.log(handlerResponse);
      });
      process.exit();
    }

    client.put(process.argv[3], process.argv[4], function(err, handlerResponse) {
      if (err) {
        console.log(err);
      }
      console.log(handlerResponse);
    });
    break;
  }
  case 'delete': {
    if (!process.argv[3]) {
      console.log('Please provide RecordID: mfw-client delete RecordID');
      process.exit();
    }

    if (!process.argv[4] && !process.env.ACCESS_TOKEN) {
      console.log('Please provide ENV:ACCESS_TOKEN or token by: mfw-client delete RecordID TOKEN');
      process.exit();
    }

    if (process.argv[4]) {
      client.delete(process.argv[3], process.argv[4], function(err, handlerResponse) {
        if (err) {
          console.log(err);
        }
        console.log(handlerResponse);
      });
      process.exit();
    }

    client.delete(process.argv[3], function(err, handlerResponse) {
      if (err) {
        console.log(err);
      }
      console.log(handlerResponse);
    });
    break;
  }

  case 'search': {
    if (!process.env.SECURE_KEY && !process.env.ACCESS_TOKEN) {
      console.log('Please provide SECURE KEY or ACCESS_TOKEN:');
      console.log('\tSECURE_KEY=xxx mfw-client search \'{key: value}\'');
      console.log('\tor');
      console.log('\tACCESS_TOKEN=TOKEN mfw-client search \'{key: value}\'');
      process.exit();
    }

    if (!process.argv[3]) {
      console.log('Please provide data: mfw-client search \'{key: value}\'');
      process.exit();
    }
    var data = {};
    try {
      data = JSON.parse(process.argv[3]);
    } catch (e) {
      console.log(e);
      console.log(e.stack);
      process.exit();
    }
    client.search(data, function(err, handlerResponse) {
      if (err) {
        console.log(err);
      }
      console.log(handlerResponse);
    });
    break;
  }
}
